type Todo @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin", "user"]){
	name: String
	checked: Boolean
	created: AWSDateTime
}

type User @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin", "user"]){
	id: ID
	name: String
	todos(count: Int, nextToken: String): PaginatedTodos!
	@aws_iam @aws_cognito_user_pools(cognito_groups: ["admin", "user"])
}

type PaginatedTodos @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin", "user"]){
	items: [Todo!]!
	nextToken: String
}

type PaginatedUsers @aws_iam @aws_cognito_user_pools(cognito_groups: ["admin", "user"]){
	items: [User!]!
	nextToken: String
}

type Subscription {
	newTodo: Todo
	@aws_subscribe(mutations: ["addTodo"])
	@aws_iam @aws_cognito_user_pools(cognito_groups: ["admin", "user"])
}

type Mutation {
	addTodo(userId: ID!, name: String!): Todo!
	@aws_iam @aws_cognito_user_pools(cognito_groups: ["admin", "user"])
}

type Query {
	user(id: ID): User
	@aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
	allUsers(count: Int, nextToken: String): PaginatedUsers!
	@aws_iam @aws_cognito_user_pools(cognito_groups: ["admin"])
	me: User
	@aws_iam @aws_cognito_user_pools(cognito_groups: ["user"])
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
